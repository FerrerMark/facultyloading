try {
    $sql = "SELECT s.*, CONCAT(f.firstname, ' ', f.lastname) AS facultyName
            FROM schedules s 
            JOIN faculty f ON s.faculty_id = f.faculty_id 
            WHERE s.section_id = :section_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':section_id' => $section_id]);
    $schedules = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    die("Query Error: " . $e->getMessage());
}

// Convert schedules for easy lookup
$schedule_data = [];
foreach ($schedules as $schedule) {
    $schedule_key = $schedule['start_time'] . '-' . $schedule['end_time'] . '-' . $schedule['day_of_week'];
    $schedule_data[$schedule_key] = $schedule;
}

// Process faculty assignment
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_GET['action']) && $_GET['action'] === 'add') {
    try {
        $teacher = htmlspecialchars($_POST['teacher'] ?? '');
        $course = htmlspecialchars($_POST['course'] ?? '');
        $schedule_data_from_form = $_POST['schedule_data'] ?? [];

        // Fetch section details
        $stmt = $pdo->prepare("SELECT year_level, semester FROM sections WHERE section_id = :section");
        $stmt->execute([':section' => $section_id]);
        $section = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$section) {
            die("Error: Section not found.");
        }

        $year_level = $section['year_level'];
        $semester = $section['semester'];

        // Group time slots by day
        $grouped_schedules = [];
        foreach ($schedule_data_from_form as $key => $value) {
            list($start_time, $end_time, $day_of_week) = explode('-', $key);
            $start_time = date("H:i:s", strtotime($start_time));
            $end_time = date("H:i:s", strtotime($end_time));

            if (isset($grouped_schedules[$day_of_week])) {
                $grouped_schedules[$day_of_week]['end_time'] = $end_time;
            } else {
                $grouped_schedules[$day_of_week] = ['start_time' => $start_time, 'end_time' => $end_time];
            }
        }

        // Insert new schedule if no conflicts
        foreach ($grouped_schedules as $day_of_week => $times) {
            $conflict_stmt = $pdo->prepare("
                SELECT COUNT(*) FROM schedules 
                WHERE faculty_id = :faculty_id 
                AND day_of_week = :day_of_week
                AND (
                    (:start_time BETWEEN start_time AND end_time) 
                    OR (:end_time BETWEEN start_time AND end_time)
                    OR (start_time BETWEEN :start_time AND :end_time)
                )
            ");
            $conflict_stmt->execute([
                ':faculty_id' => $teacher,
                ':day_of_week' => $day_of_week,
                ':start_time' => $times['start_time'],
                ':end_time' => $times['end_time']
            ]);
            $conflict_count = $conflict_stmt->fetchColumn();

            if ($conflict_count == 0) {
                $stmt = $pdo->prepare("
                    INSERT INTO schedules (faculty_id, subject_code, section_id, start_time, end_time, day_of_week, is_checked, department, year_level, semester) 
                    VALUES (:teacher, :course, :section_id, :start_time, :end_time, :day_of_week, 1, :department, :year_level, :semester)
                ");
                $stmt->execute([
                    ':teacher' => $teacher,
                    ':course' => $course,
                    ':section_id' => $section_id,
                    ':start_time' => $times['start_time'],
                    ':end_time' => $times['end_time'],
                    ':day_of_week' => $day_of_week,
                    ':department' => $department,
                    ':year_level' => $year_level,
                    ':semester' => $semester
                ]);
            } else {
                echo "â›” Schedule conflict detected for $teacher on $day_of_week from {$times['start_time']} to {$times['end_time']}!<br>";
            }
        }

        header("Location: ../frame/manual_scheduling.php?department=$department&section=$section_id&success=true");
        exit();
    } catch (PDOException $e) {
        die("Insertion Error: " . $e->getMessage());
    }
}

// Fetch faculty list
try {
    $stmt = $pdo->prepare("SELECT * FROM faculty WHERE departmentID = :departmentID");
    $stmt->bindParam(':departmentID', $department, PDO::PARAM_STR);
    $stmt->execute();
    $facultyList = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    die("Query failed: " . $e->getMessage());
}

// Delete a schedule
if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_GET['action'] === 'delete') {
    try {
        $schedule_id = $_POST['schedule_id'];
        $stmt = $pdo->prepare("DELETE FROM schedules WHERE schedule_id = :schedule_id");
        $stmt->bindParam(':schedule_id', $schedule_id, PDO::PARAM_INT);
        $stmt->execute();
        header("Location: ../frame/manual_scheduling.php?department=$department&section=$section_id&success=true&section_id=$section_id");
        exit();
    } catch (PDOException $e) {
        die("Deletion Error: " . $e->getMessage());
    }
}

// Fetch courses
try {
    $stmt = $pdo->prepare("SELECT * FROM courses WHERE program_code = :program_code");
    $stmt->bindParam(':program_code', $department, PDO::PARAM_STR);
    $stmt->execute();
    $courseList = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    die("Query failed: " . $e->getMessage());
}
?>
